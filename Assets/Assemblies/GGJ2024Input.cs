//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/GGJ2024Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GGJ2024
{
    public partial class @GGJ2024Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GGJ2024Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GGJ2024Input"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""8b2a1da0-0dbe-4644-9b2b-f0c4384c6cc9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f7528879-d49e-4c27-b987-292c2e4589a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Nose"",
                    ""type"": ""Button"",
                    ""id"": ""6fb773d1-e247-4388-85b3-0824ac1aa43a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e1aab08c-b7d6-4100-bf44-1093b7b93204"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""08b2fe51-42a3-45b2-8dca-3ddf9d2b8985"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dab505ff-3fd8-465f-b1a5-0f2de3943b02"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""698cb6d7-9113-4d4f-acc6-fe3e1c55eeb4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""177599eb-ff0d-44ab-b568-6eb5a9d97a89"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9d586a39-367e-4366-867e-c697bb320383"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""0152cf02-cd95-4004-a046-7fafe897b94a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3d156d47-c679-4b18-9410-de6fb2198dea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Nose"",
                    ""type"": ""Button"",
                    ""id"": ""484a76a0-f25b-48ce-bcf5-709b6ccb81d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""18959ea5-3f94-4a8e-ae20-dc6de3e21384"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4e79fed-bbe1-449e-9a9b-66fa354d982a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad7f87dd-c64b-4000-8cb5-fbaef1a0ac58"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4237ef5f-90ff-4e16-b0c7-e4de94605d99"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e4fef211-b650-4db2-95e4-8736f14e11d6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""76dd573f-2802-4e94-82d0-2b55bfaa80a2"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player1
            m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
            m_Player1_Move = m_Player1.FindAction("Move", throwIfNotFound: true);
            m_Player1_Nose = m_Player1.FindAction("Nose", throwIfNotFound: true);
            // Player2
            m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
            m_Player2_Move = m_Player2.FindAction("Move", throwIfNotFound: true);
            m_Player2_Nose = m_Player2.FindAction("Nose", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player1
        private readonly InputActionMap m_Player1;
        private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
        private readonly InputAction m_Player1_Move;
        private readonly InputAction m_Player1_Nose;
        public struct Player1Actions
        {
            private @GGJ2024Input m_Wrapper;
            public Player1Actions(@GGJ2024Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player1_Move;
            public InputAction @Nose => m_Wrapper.m_Player1_Nose;
            public InputActionMap Get() { return m_Wrapper.m_Player1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer1Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Nose.started += instance.OnNose;
                @Nose.performed += instance.OnNose;
                @Nose.canceled += instance.OnNose;
            }

            private void UnregisterCallbacks(IPlayer1Actions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Nose.started -= instance.OnNose;
                @Nose.performed -= instance.OnNose;
                @Nose.canceled -= instance.OnNose;
            }

            public void RemoveCallbacks(IPlayer1Actions instance)
            {
                if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer1Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player1Actions @Player1 => new Player1Actions(this);

        // Player2
        private readonly InputActionMap m_Player2;
        private List<IPlayer2Actions> m_Player2ActionsCallbackInterfaces = new List<IPlayer2Actions>();
        private readonly InputAction m_Player2_Move;
        private readonly InputAction m_Player2_Nose;
        public struct Player2Actions
        {
            private @GGJ2024Input m_Wrapper;
            public Player2Actions(@GGJ2024Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player2_Move;
            public InputAction @Nose => m_Wrapper.m_Player2_Nose;
            public InputActionMap Get() { return m_Wrapper.m_Player2; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer2Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player2ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player2ActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Nose.started += instance.OnNose;
                @Nose.performed += instance.OnNose;
                @Nose.canceled += instance.OnNose;
            }

            private void UnregisterCallbacks(IPlayer2Actions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Nose.started -= instance.OnNose;
                @Nose.performed -= instance.OnNose;
                @Nose.canceled -= instance.OnNose;
            }

            public void RemoveCallbacks(IPlayer2Actions instance)
            {
                if (m_Wrapper.m_Player2ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer2Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player2ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player2ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player2Actions @Player2 => new Player2Actions(this);
        public interface IPlayer1Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnNose(InputAction.CallbackContext context);
        }
        public interface IPlayer2Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnNose(InputAction.CallbackContext context);
        }
    }
}
